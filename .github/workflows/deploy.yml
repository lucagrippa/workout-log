name: Deploy to Vercel
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  # Run this workflow whenever a new commit is pushed to main.
  push: {branches: [main]}
  # Run this workflow once per day, at 10:15 UTC
  schedule: [{cron: "15 10 * * *"}]
  # Run this workflow when triggered manually in GitHubâ€™s UI.
  workflow_dispatch: {}

jobs:
  # check-submodule:
  #   runs-on: ubuntu-latest
  #   # Map a step output to a job output
  #   outputs:
  #     changes: ${{ steps.submodule-changes.outputs.CHANGES }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Update submodules
  #       run: git submodule update --init --recursive

  #     - name: Get current submodule commit hash
  #       id: submodule-commit
  #       run: |
  #         cd docs/data/workouts
  #         echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        
  #     - name: Get latest submodule commit hash
  #       id: latest-commit
  #       run: |
  #         cd docs/data/workouts
  #         git fetch origin
  #         echo "commit=$(git rev-parse origin/main)" >> $GITHUB_OUTPUT
          

  #     - name: Check for submodule updates
  #       id: submodule-changes
  #       run: |
  #         echo "Checking for changes in submodule...";
  #         remote_commit=$(git rev-parse @{upstream});
  #         local_commit=$(git rev-parse HEAD);
  #         echo "Local commit: $local_commit"
  #         echo "Remote commit: $remote_commit"
  #         if [ "${{ steps.submodule-commit.outputs.commit }}" != "${{ steps.latest-commit.outputs.commit }}" ]; then
  #         # if [ "$local_commit" != "$remote_commit" ]; then
  #           echo "Submodule has been updated";
  #           echo "CHANGES=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "No submodule changes detected."
  #           echo "CHANGES=false" >> $GITHUB_OUTPUT
  #         fi

  deploy:
    # needs: check-submodule
    runs-on: ubuntu-latest
    # if: ${{ needs.check-submodule.outputs.changes == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update submodules
        run: git submodule update --init --recursive --remote --merge

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fitdown

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Disable Observable Telemetry
        run: OBSERVABLE_TELEMETRY_DISABLE=true

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prod --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
